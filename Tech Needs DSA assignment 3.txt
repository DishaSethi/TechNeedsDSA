1        Peak element
import java.io.*;
import java.util.*;
import java.math.*;
public class a{
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        System.out.println("enter the number of elements");
        int n =sc.nextInt();
        int[] a=new int[n];
        System.out.println("enter elements:");
        for(int i=0;i<n;i++){
            a[i]=sc.nextInt();


        }
        System.out.println("enter the index");
int index=sc.nextInt();
int ans=peak(a,n);
System.out.println( (index==ans));


       
    }
    public static int peak(int []a,int n){
        if(n==1) {
            return 0;
        }
        if(a[0]>=a[1]) {
            return 0;
        }
        if(a[n-1]>=a[n-2]) return n-1;
        int ind=0;
        for(int i=1;i<n-1;i++){
            if(a[i]>=a[i-1] && a[i]>=a[i+1]){
ind=i;
            }


        }
        return ind;
    }
}


2 Min max in an Array
Approach 1 : Using Linear Search
import java.io.*;
import java.util.*;
import java.math.*;
public class a{
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        System.out.println("enter the number of elements");
        int n =sc.nextInt();
        int[] a=new int[n];
        System.out.println("enter elements:");
        for(int i=0;i<n;i++){
            a[i]=sc.nextInt();


        }
       int min=Integer.MAX_VALUE;
       int max=Integer.MIN_VALUE;




for(int i=0;i<n;i++){
    if(a[i]>max){
        max=a[i];
    }
    if(a[i]<min){
        min=a[i];
    }
}
System.out.println("The min is "+min+" The max is"+max);
       
    }
   
}


Approach 2: Using Bubble sort
import java.io.*;
import java.util.*;
import java.math.*;
public class a{
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        System.out.println("enter the number of elements");
        int n =sc.nextInt();
        int[] a=new int[n];
        System.out.println("enter elements:");
        for(int i=0;i<n;i++){
            a[i]=sc.nextInt();


        }
    //   Bubble sorting
    for(int i=0;i<n-1;i++){
        for(int j=0;j<n-i-1;j++){
            if(a[j+1]<a[j]){
                int temp=a[j+1];
                a[j+1]=a[j];
                a[j]=temp;
            }
        }
    }


    System.out.println("the min element is "+a[0] +" The max element is"+a[n-1]);




       
    }
   
}


3 Find the frequency of an element
import java.io.*;
import java.util.*;
import java.math.*;
public class a{
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        System.out.println("enter the number of elements");
        int n =sc.nextInt();
        int[] a=new int[n];
        System.out.println("enter elements:");
        for(int i=0;i<n;i++){
            a[i]=sc.nextInt();


        }
        System.out.println("The frequency of what element?");
        int ele=sc.nextInt();
      int c=0;
        for(int i=0;i<n;i++){
            if(ele==a[i]){
                c++;
            }
        }
 


    System.out.println("The frequency is "+c);




       
    }
   
}


4 Check if the array is sorted


import java.io.*;
import java.util.*;
import java.math.*;
public class a{
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        System.out.println("enter the number of elements");
        int n =sc.nextInt();
        int[] a=new int[n];
        System.out.println("enter elements:");
        for(int i=0;i<n;i++){
            a[i]=sc.nextInt();


        }
     boolean ans=true;
        for(int i=0;i<n-1;i++){
            if(a[i]>a[i+1]){
                ans=false;
                break;
            }
        }
 


    System.out.println(ans);




       
    }
   
}


5. Move Zeros
class Solution {
    public void moveZeroes(int[] nums) {
        int []ans=new int[nums.length];
        Arrays.fill(ans,0);
        int p=0;
        int j=0;
        while(p<nums.length){
            if(nums[p]!=0){
                ans[j]=nums[p];
                j++;
            }
            p++;
        }
        for(int i=0;i<nums.length;i++){
            nums[i]=ans[i];
        }
       
    }
}


6. Linear Search


public class Solution {


    public static int linearSearch(int arr[], int x) {
    //Your code goes here
    // int ind=-1;
    for(int i=0;i<arr.length;i++){
      if(x==arr[i]){
        return i;
      }
    }
    return -1;
    }
}


7. Missing number
class Solution {
    public int missingNumber(int[] nums) {
        Arrays.sort(nums);
        int j=0;
        for(int i=0;i<nums.length;i++){
            if(nums[i]!=j){
                break;
            }else{
                j++;
            }
        }
        return j;
    }
}
8. Largest element in an array
import java.util.* ;
import java.io.*; 


public class Solution {


    static int largestElement(int[] arr, int n) {
        // Write your code here.
int max=arr[0];
for(int i=0;i<arr.length;i++){
    if(arr[i]>max){
        max=arr[i];
    }
}
return max;
    }
}